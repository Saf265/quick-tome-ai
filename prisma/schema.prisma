datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String          @default("USER")
  hasAccess     Boolean         @default(false)
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  stripeCustomerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ebook     Ebook[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Feedback {
  id        String   @id @default(cuid())
  feedback  String
  createdAt DateTime @default(now())
}

model Ebook {
  id    String @id @default(cuid())
  title String

  legnth      String
  publicCible String
  theme       String
  description String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  at DateTime @default(now())

  content        EbookContent @relation(fields: [ebookContentId], references: [id])
  // status StatusGeneration @default(in_progress)
  ebookContentId String

  @@index([userId])
}

model EbookContent {
  id    String              @id @default(cuid())
  intro EbookContentSection @relation(fields: [ebookContentSectionId], references: [id])

  chapters EbookContentSection[]

  conclusion EbookContentSection @relation(fields: [ebookContentSectionId], references: [id])

  Ebook Ebook[]
}

model EbookContentSection {
  id             String        @id @default(cuid())
  name           String
  content        String
  EbookContent   EbookContent? @relation(fields: [ebookContentId], references: [id])
  ebookContentId String?
}

// enum StatusGeneration {
//   in_progress
//   completed
//   error
// }

// model Subscription {
//   id String @id @default(cuid())

//   customerId String
//   customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)
//   status     String

//   // userId String
//   // user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   planType String

//   expirationDate DateTime
//   at             DateTime @default(now())
// }
